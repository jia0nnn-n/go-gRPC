// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: continuous-stream.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ContinuousStreamChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ContinuousStreamChunk) Reset() {
	*x = ContinuousStreamChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_continuous_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousStreamChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousStreamChunk) ProtoMessage() {}

func (x *ContinuousStreamChunk) ProtoReflect() protoreflect.Message {
	mi := &file_continuous_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousStreamChunk.ProtoReflect.Descriptor instead.
func (*ContinuousStreamChunk) Descriptor() ([]byte, []int) {
	return file_continuous_stream_proto_rawDescGZIP(), []int{0}
}

func (x *ContinuousStreamChunk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContinuousStreamChunk) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ContinuousStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk *ContinuousStreamChunk `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *ContinuousStreamRequest) Reset() {
	*x = ContinuousStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_continuous_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousStreamRequest) ProtoMessage() {}

func (x *ContinuousStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_continuous_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousStreamRequest.ProtoReflect.Descriptor instead.
func (*ContinuousStreamRequest) Descriptor() ([]byte, []int) {
	return file_continuous_stream_proto_rawDescGZIP(), []int{1}
}

func (x *ContinuousStreamRequest) GetChunk() *ContinuousStreamChunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type ContinuousStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk *ContinuousStreamChunk `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *ContinuousStreamResponse) Reset() {
	*x = ContinuousStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_continuous_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousStreamResponse) ProtoMessage() {}

func (x *ContinuousStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_continuous_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousStreamResponse.ProtoReflect.Descriptor instead.
func (*ContinuousStreamResponse) Descriptor() ([]byte, []int) {
	return file_continuous_stream_proto_rawDescGZIP(), []int{2}
}

func (x *ContinuousStreamResponse) GetChunk() *ContinuousStreamChunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

var File_continuous_stream_proto protoreflect.FileDescriptor

var file_continuous_stream_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x2d, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3b, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a,
	0x17, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x4e, 0x0a, 0x18,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x32, 0x9d, 0x02, 0x0a,
	0x17, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x53, 0x0a,
	0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x12, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x12, 0x58, 0x0a, 0x0f, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_continuous_stream_proto_rawDescOnce sync.Once
	file_continuous_stream_proto_rawDescData = file_continuous_stream_proto_rawDesc
)

func file_continuous_stream_proto_rawDescGZIP() []byte {
	file_continuous_stream_proto_rawDescOnce.Do(func() {
		file_continuous_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_continuous_stream_proto_rawDescData)
	})
	return file_continuous_stream_proto_rawDescData
}

var file_continuous_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_continuous_stream_proto_goTypes = []interface{}{
	(*ContinuousStreamChunk)(nil),    // 0: proto.ContinuousStreamChunk
	(*ContinuousStreamRequest)(nil),  // 1: proto.ContinuousStreamRequest
	(*ContinuousStreamResponse)(nil), // 2: proto.ContinuousStreamResponse
}
var file_continuous_stream_proto_depIdxs = []int32{
	0, // 0: proto.ContinuousStreamRequest.chunk:type_name -> proto.ContinuousStreamChunk
	0, // 1: proto.ContinuousStreamResponse.chunk:type_name -> proto.ContinuousStreamChunk
	1, // 2: proto.ContinuousStreamService.ServerNotify:input_type -> proto.ContinuousStreamRequest
	1, // 3: proto.ContinuousStreamService.ClientGiveIn:input_type -> proto.ContinuousStreamRequest
	1, // 4: proto.ContinuousStreamService.HasConversation:input_type -> proto.ContinuousStreamRequest
	2, // 5: proto.ContinuousStreamService.ServerNotify:output_type -> proto.ContinuousStreamResponse
	2, // 6: proto.ContinuousStreamService.ClientGiveIn:output_type -> proto.ContinuousStreamResponse
	2, // 7: proto.ContinuousStreamService.HasConversation:output_type -> proto.ContinuousStreamResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_continuous_stream_proto_init() }
func file_continuous_stream_proto_init() {
	if File_continuous_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_continuous_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousStreamChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_continuous_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_continuous_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_continuous_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_continuous_stream_proto_goTypes,
		DependencyIndexes: file_continuous_stream_proto_depIdxs,
		MessageInfos:      file_continuous_stream_proto_msgTypes,
	}.Build()
	File_continuous_stream_proto = out.File
	file_continuous_stream_proto_rawDesc = nil
	file_continuous_stream_proto_goTypes = nil
	file_continuous_stream_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ContinuousStreamServiceClient is the client API for ContinuousStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContinuousStreamServiceClient interface {
	// server send, client receive
	ServerNotify(ctx context.Context, in *ContinuousStreamRequest, opts ...grpc.CallOption) (ContinuousStreamService_ServerNotifyClient, error)
	// client send, server receive
	ClientGiveIn(ctx context.Context, opts ...grpc.CallOption) (ContinuousStreamService_ClientGiveInClient, error)
	// two way conversation
	HasConversation(ctx context.Context, opts ...grpc.CallOption) (ContinuousStreamService_HasConversationClient, error)
}

type continuousStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContinuousStreamServiceClient(cc grpc.ClientConnInterface) ContinuousStreamServiceClient {
	return &continuousStreamServiceClient{cc}
}

func (c *continuousStreamServiceClient) ServerNotify(ctx context.Context, in *ContinuousStreamRequest, opts ...grpc.CallOption) (ContinuousStreamService_ServerNotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ContinuousStreamService_serviceDesc.Streams[0], "/proto.ContinuousStreamService/ServerNotify", opts...)
	if err != nil {
		return nil, err
	}
	x := &continuousStreamServiceServerNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContinuousStreamService_ServerNotifyClient interface {
	Recv() (*ContinuousStreamResponse, error)
	grpc.ClientStream
}

type continuousStreamServiceServerNotifyClient struct {
	grpc.ClientStream
}

func (x *continuousStreamServiceServerNotifyClient) Recv() (*ContinuousStreamResponse, error) {
	m := new(ContinuousStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *continuousStreamServiceClient) ClientGiveIn(ctx context.Context, opts ...grpc.CallOption) (ContinuousStreamService_ClientGiveInClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ContinuousStreamService_serviceDesc.Streams[1], "/proto.ContinuousStreamService/ClientGiveIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &continuousStreamServiceClientGiveInClient{stream}
	return x, nil
}

type ContinuousStreamService_ClientGiveInClient interface {
	Send(*ContinuousStreamRequest) error
	CloseAndRecv() (*ContinuousStreamResponse, error)
	grpc.ClientStream
}

type continuousStreamServiceClientGiveInClient struct {
	grpc.ClientStream
}

func (x *continuousStreamServiceClientGiveInClient) Send(m *ContinuousStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *continuousStreamServiceClientGiveInClient) CloseAndRecv() (*ContinuousStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ContinuousStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *continuousStreamServiceClient) HasConversation(ctx context.Context, opts ...grpc.CallOption) (ContinuousStreamService_HasConversationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ContinuousStreamService_serviceDesc.Streams[2], "/proto.ContinuousStreamService/HasConversation", opts...)
	if err != nil {
		return nil, err
	}
	x := &continuousStreamServiceHasConversationClient{stream}
	return x, nil
}

type ContinuousStreamService_HasConversationClient interface {
	Send(*ContinuousStreamRequest) error
	Recv() (*ContinuousStreamResponse, error)
	grpc.ClientStream
}

type continuousStreamServiceHasConversationClient struct {
	grpc.ClientStream
}

func (x *continuousStreamServiceHasConversationClient) Send(m *ContinuousStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *continuousStreamServiceHasConversationClient) Recv() (*ContinuousStreamResponse, error) {
	m := new(ContinuousStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContinuousStreamServiceServer is the server API for ContinuousStreamService service.
type ContinuousStreamServiceServer interface {
	// server send, client receive
	ServerNotify(*ContinuousStreamRequest, ContinuousStreamService_ServerNotifyServer) error
	// client send, server receive
	ClientGiveIn(ContinuousStreamService_ClientGiveInServer) error
	// two way conversation
	HasConversation(ContinuousStreamService_HasConversationServer) error
}

// UnimplementedContinuousStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedContinuousStreamServiceServer struct {
}

func (*UnimplementedContinuousStreamServiceServer) ServerNotify(*ContinuousStreamRequest, ContinuousStreamService_ServerNotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerNotify not implemented")
}
func (*UnimplementedContinuousStreamServiceServer) ClientGiveIn(ContinuousStreamService_ClientGiveInServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientGiveIn not implemented")
}
func (*UnimplementedContinuousStreamServiceServer) HasConversation(ContinuousStreamService_HasConversationServer) error {
	return status.Errorf(codes.Unimplemented, "method HasConversation not implemented")
}

func RegisterContinuousStreamServiceServer(s *grpc.Server, srv ContinuousStreamServiceServer) {
	s.RegisterService(&_ContinuousStreamService_serviceDesc, srv)
}

func _ContinuousStreamService_ServerNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContinuousStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContinuousStreamServiceServer).ServerNotify(m, &continuousStreamServiceServerNotifyServer{stream})
}

type ContinuousStreamService_ServerNotifyServer interface {
	Send(*ContinuousStreamResponse) error
	grpc.ServerStream
}

type continuousStreamServiceServerNotifyServer struct {
	grpc.ServerStream
}

func (x *continuousStreamServiceServerNotifyServer) Send(m *ContinuousStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContinuousStreamService_ClientGiveIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContinuousStreamServiceServer).ClientGiveIn(&continuousStreamServiceClientGiveInServer{stream})
}

type ContinuousStreamService_ClientGiveInServer interface {
	SendAndClose(*ContinuousStreamResponse) error
	Recv() (*ContinuousStreamRequest, error)
	grpc.ServerStream
}

type continuousStreamServiceClientGiveInServer struct {
	grpc.ServerStream
}

func (x *continuousStreamServiceClientGiveInServer) SendAndClose(m *ContinuousStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *continuousStreamServiceClientGiveInServer) Recv() (*ContinuousStreamRequest, error) {
	m := new(ContinuousStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContinuousStreamService_HasConversation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContinuousStreamServiceServer).HasConversation(&continuousStreamServiceHasConversationServer{stream})
}

type ContinuousStreamService_HasConversationServer interface {
	Send(*ContinuousStreamResponse) error
	Recv() (*ContinuousStreamRequest, error)
	grpc.ServerStream
}

type continuousStreamServiceHasConversationServer struct {
	grpc.ServerStream
}

func (x *continuousStreamServiceHasConversationServer) Send(m *ContinuousStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *continuousStreamServiceHasConversationServer) Recv() (*ContinuousStreamRequest, error) {
	m := new(ContinuousStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ContinuousStreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ContinuousStreamService",
	HandlerType: (*ContinuousStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerNotify",
			Handler:       _ContinuousStreamService_ServerNotify_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientGiveIn",
			Handler:       _ContinuousStreamService_ClientGiveIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HasConversation",
			Handler:       _ContinuousStreamService_HasConversation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "continuous-stream.proto",
}
